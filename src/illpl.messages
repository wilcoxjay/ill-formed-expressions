prog: FUN VAL 
# 1
##
## Ends in an error in state: 1.
##
## funbinding -> FUN . VAR LPAREN var_list RPAREN requires ensures EQ expr [ VAL FUN ]
##
## The known suffix of the stack is as follows:
## FUN 
##

Expected function name after 'fun'.

prog: FUN VAR LPAREN COMMA 
# 2
##
## Ends in an error in state: 3.
##
## funbinding -> FUN VAR LPAREN . var_list RPAREN requires ensures EQ expr [ VAL FUN ]
##
## The known suffix of the stack is as follows:
## FUN VAR LPAREN 
##

Expected (possibly empty) argument list after '('.

prog: FUN VAR LPAREN RPAREN ENSURES TRUE VAR 
# 3
##
## Ends in an error in state: 98.
##
## ensures -> ENSURES expr . [ EQ ]
## expr -> expr . CONJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
##
## The known suffix of the stack is as follows:
## ENSURES expr 
##

Expected '=' after function declaration.
An ensures clause was detected to terminate here.
It is possible that the ensures clause should extend further.

prog: FUN VAR LPAREN RPAREN ENSURES VAL 
# 4
##
## Ends in an error in state: 94.
##
## ensures -> ENSURES . expr [ EQ ]
## ensures -> ENSURES . VAR DOT expr [ EQ ]
##
## The known suffix of the stack is as follows:
## ENSURES 
##

Expected expression or bound variable for ensures clause.
Valid ensures clauses include:
  Any expression; for example:
      ensures x + y == z
  An expression with a bound variable for the result of the function; for example:
      ensures r. r <= x
  Here, r is a name for the return value of the function.

prog: FUN VAR LPAREN RPAREN ENSURES VAR DOT VAL 
# 5
##
## Ends in an error in state: 96.
##
## ensures -> ENSURES VAR DOT . expr [ EQ ]
##
## The known suffix of the stack is as follows:
## ENSURES VAR DOT 
##

Expected expression after bound variable for ensures clause.
Valid ensures clauses include:
  Any expression; for example:
      ensures x + y == z
  An expression with a bound variable for the result of the function; for example:
      ensures r. r <= x
  Here, r is a name for the return value of the function.

prog: FUN VAR LPAREN RPAREN ENSURES VAR DOT VAR VAL 
# 6
##
## Ends in an error in state: 97.
##
## ensures -> ENSURES VAR DOT expr . [ EQ ]
## expr -> expr . CONJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
##
## The known suffix of the stack is as follows:
## ENSURES VAR DOT expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

Expected '=' after function declaration.
An ensures clause was detected to terminate here.
It is possible that the ensures clause should extend further.

prog: FUN VAR LPAREN RPAREN ENSURES VAR VAR 
# 7
##
## Ends in an error in state: 95.
##
## ensures -> ENSURES VAR . DOT expr [ EQ ]
## expr -> VAR . LPAREN expr_list RPAREN [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
## simple_expr -> VAR . [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ DIV DISJ CONJ ADD ]
##
## The known suffix of the stack is as follows:
## ENSURES VAR 
##

Expected '=' after function declaration.
An ensures clause was detected to terminate here.
It is possible that the ensures clause should extend further.

prog: FUN VAR LPAREN RPAREN EQ VAL 
# 8
##
## Ends in an error in state: 100.
##
## funbinding -> FUN VAR LPAREN var_list RPAREN requires ensures EQ . expr [ VAL FUN ]
##
## The known suffix of the stack is as follows:
## FUN VAR LPAREN var_list RPAREN requires ensures EQ 
##

Expected body expression after function declaration.

prog: FUN VAR LPAREN RPAREN EQ VAR THEN 
# 9
##
## Ends in an error in state: 101.
##
## expr -> expr . CONJ expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE FUN EQEQ DIV DISJ CONJ ADD ]
## funbinding -> FUN VAR LPAREN var_list RPAREN requires ensures EQ expr . [ VAL FUN ]
##
## The known suffix of the stack is as follows:
## FUN VAR LPAREN var_list RPAREN requires ensures EQ expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

Expected fun binding or val binding.
The previous fun binding was detected to end here,
but it is possible that it should extend further.

prog: FUN VAR LPAREN RPAREN REQUIRES VAL 
# 10
##
## Ends in an error in state: 9.
##
## requires -> REQUIRES . expr [ EQ ENSURES ]
##
## The known suffix of the stack is as follows:
## REQUIRES 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR LPAREN RPAREN REQUIRES VAR VAL 
# 11
##
## Ends in an error in state: 92.
##
## expr -> expr . CONJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EQ ENSURES DIV DISJ CONJ ADD ]
## requires -> REQUIRES expr . [ EQ ENSURES ]
##
## The known suffix of the stack is as follows:
## REQUIRES expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR LPAREN RPAREN VAR 
# 12
##
## Ends in an error in state: 8.
##
## funbinding -> FUN VAR LPAREN var_list RPAREN . requires ensures EQ expr [ VAL FUN ]
##
## The known suffix of the stack is as follows:
## FUN VAR LPAREN var_list RPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR LPAREN VAL 
# 13
##
## Ends in an error in state: 3.
##
## funbinding -> FUN VAR LPAREN . var_list RPAREN requires ensures EQ expr [ VAL FUN ]
##
## The known suffix of the stack is as follows:
## FUN VAR LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR LPAREN VAR BANG 
# 14
##
## Ends in an error in state: 4.
##
## separated_nonempty_list(COMMA,VAR) -> VAR . [ RPAREN ]
## separated_nonempty_list(COMMA,VAR) -> VAR . COMMA separated_nonempty_list(COMMA,VAR) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## VAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUN VAR VAR 
# 15
##
## Ends in an error in state: 2.
##
## funbinding -> FUN VAR . LPAREN var_list RPAREN requires ensures EQ expr [ VAL FUN ]
##
## The known suffix of the stack is as follows:
## FUN VAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAL 
# 16
##
## Ends in an error in state: 107.
##
## valbinding -> VAL . VAR EQ expr [ EOF ]
##
## The known suffix of the stack is as follows:
## VAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ ASSERT TRUE VAR 
# 17
##
## Ends in an error in state: 33.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> ASSERT expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ASSERT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ ASSERT VAL 
# 18
##
## Ends in an error in state: 31.
##
## expr -> ASSERT . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## ASSERT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ BANG TRUE VAR 
# 19
##
## Ends in an error in state: 67.
##
## expr -> BANG expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## BANG expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ BANG VAL 
# 20
##
## Ends in an error in state: 30.
##
## expr -> BANG . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## BANG 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ EXISTS VAL 
# 21
##
## Ends in an error in state: 27.
##
## expr -> EXISTS . VAR DOT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXISTS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ EXISTS VAR DOT TRUE VAR 
# 22
##
## Ends in an error in state: 68.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> EXISTS VAR DOT expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXISTS VAR DOT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ EXISTS VAR DOT VAL 
# 23
##
## Ends in an error in state: 29.
##
## expr -> EXISTS VAR DOT . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXISTS VAR DOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ EXISTS VAR VAR 
# 24
##
## Ends in an error in state: 28.
##
## expr -> EXISTS VAR . DOT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## EXISTS VAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ FORALL VAL 
# 25
##
## Ends in an error in state: 23.
##
## expr -> FORALL . VAR DOT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## FORALL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ FORALL VAR DOT TRUE VAR 
# 26
##
## Ends in an error in state: 69.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> FORALL VAR DOT expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## FORALL VAR DOT expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ FORALL VAR DOT VAL 
# 27
##
## Ends in an error in state: 25.
##
## expr -> FORALL VAR DOT . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## FORALL VAR DOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ FORALL VAR VAR 
# 28
##
## Ends in an error in state: 24.
##
## expr -> FORALL VAR . DOT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## FORALL VAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ IF VAL 
# 29
##
## Ends in an error in state: 22.
##
## expr -> IF . expr THEN expr ELSE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ IF VAR THEN VAL 
# 30
##
## Ends in an error in state: 71.
##
## expr -> IF expr THEN . expr ELSE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ IF VAR THEN VAR ELSE TRUE VAR 
# 31
##
## Ends in an error in state: 74.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> IF expr THEN expr ELSE expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ IF VAR THEN VAR ELSE VAL 
# 32
##
## Ends in an error in state: 73.
##
## expr -> IF expr THEN expr ELSE . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ IF VAR THEN VAR VAL 
# 33
##
## Ends in an error in state: 72.
##
## expr -> expr . CONJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ ELSE DIV DISJ CONJ ADD ]
## expr -> IF expr THEN expr . ELSE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ IF VAR VAL 
# 34
##
## Ends in an error in state: 70.
##
## expr -> expr . CONJ expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ THEN SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> IF expr . THEN expr ELSE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## IF expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LET VAL 
# 35
##
## Ends in an error in state: 19.
##
## expr -> LET . VAR EQ expr IN expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LET 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LET VAR EQ VAL 
# 36
##
## Ends in an error in state: 21.
##
## expr -> LET VAR EQ . expr IN expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LET VAR EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LET VAR EQ VAR IN TRUE VAR 
# 37
##
## Ends in an error in state: 77.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> LET VAR EQ expr IN expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LET VAR EQ expr IN expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LET VAR EQ VAR IN VAL 
# 38
##
## Ends in an error in state: 76.
##
## expr -> LET VAR EQ expr IN . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LET VAR EQ expr IN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LET VAR EQ VAR VAL 
# 39
##
## Ends in an error in state: 75.
##
## expr -> expr . CONJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IN IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> LET VAR EQ expr . IN expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LET VAR EQ expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LET VAR VAR 
# 40
##
## Ends in an error in state: 20.
##
## expr -> LET VAR . EQ expr IN expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LET VAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LPAREN VAL 
# 41
##
## Ends in an error in state: 17.
##
## simple_expr -> LPAREN . RPAREN [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## simple_expr -> LPAREN . expr RPAREN [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LPAREN VAR VAL 
# 42
##
## Ends in an error in state: 78.
##
## expr -> expr . CONJ expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## simple_expr -> LPAREN expr . RPAREN [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LSQUARE COMMA 
# 43
##
## Ends in an error in state: 16.
##
## simple_expr -> LSQUARE . expr_list RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LSQUARE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LSQUARE COMMA 
# 44
##
## Ends in an error in state: 16.
##
## simple_expr -> LSQUARE . expr_list RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LSQUARE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LSQUARE VAL 
# 45
##
## Ends in an error in state: 16.
##
## simple_expr -> LSQUARE . expr_list RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LSQUARE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LSQUARE VAR RPAREN 
# 46
##
## Ends in an error in state: 82.
##
## simple_expr -> LSQUARE expr_list . RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## LSQUARE expr_list 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
## In state 84, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 80, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
## In state 81, spurious reduction of production expr_list -> loption(separated_nonempty_list(COMMA,expr)) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ LSQUARE VAR VAL 
# 47
##
## Ends in an error in state: 84.
##
## expr -> expr . CONJ expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI RSQUARE RPAREN NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ COMMA ADD ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RSQUARE RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RSQUARE RPAREN ]
##
## The known suffix of the stack is as follows:
## expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ PIPE VAL 
# 48
##
## Ends in an error in state: 14.
##
## expr -> PIPE . expr PIPE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## PIPE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ PIPE VAR VAL 
# 49
##
## Ends in an error in state: 87.
##
## expr -> expr . CONJ expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI PIPE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DIV DISJ CONJ ADD ]
## expr -> PIPE expr . PIPE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## PIPE expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ SUB TRUE VAR 
# 50
##
## Ends in an error in state: 89.
##
## expr -> SUB expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SUB expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ SUB VAL 
# 51
##
## Ends in an error in state: 13.
##
## expr -> SUB . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAL 
# 52
##
## Ends in an error in state: 109.
##
## valbinding -> VAL VAR EQ . expr [ EOF ]
##
## The known suffix of the stack is as follows:
## VAL VAR EQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR ADD TRUE VAR 
# 53
##
## Ends in an error in state: 47.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr ADD expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR ADD VAL 
# 54
##
## Ends in an error in state: 46.
##
## expr -> expr ADD . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR CONJ TRUE VAR 
# 55
##
## Ends in an error in state: 63.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr CONJ expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr CONJ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR CONJ VAL 
# 56
##
## Ends in an error in state: 62.
##
## expr -> expr CONJ . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr CONJ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR DISJ TRUE VAR 
# 57
##
## Ends in an error in state: 61.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr DISJ expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr DISJ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR DISJ VAL 
# 58
##
## Ends in an error in state: 60.
##
## expr -> expr DISJ . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr DISJ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR DIV TRUE VAR 
# 59
##
## Ends in an error in state: 45.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr DIV expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR DIV VAL 
# 60
##
## Ends in an error in state: 44.
##
## expr -> expr DIV . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR EQEQ VAL 
# 61
##
## Ends in an error in state: 58.
##
## expr -> expr EQEQ . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr EQEQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR EQEQ VAR NEQ 
# 62
##
## Ends in an error in state: 59.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr EQEQ expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr EQEQ expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR GE VAL 
# 63
##
## Ends in an error in state: 56.
##
## expr -> expr GE . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr GE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR GE VAR NEQ 
# 64
##
## Ends in an error in state: 57.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr GE expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr GE expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR GT VAL 
# 65
##
## Ends in an error in state: 54.
##
## expr -> expr GT . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr GT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR GT VAR NEQ 
# 66
##
## Ends in an error in state: 55.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr GT expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr GT expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR IMPLIES TRUE VAR 
# 67
##
## Ends in an error in state: 53.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr IMPLIES expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr IMPLIES expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR IMPLIES VAL 
# 68
##
## Ends in an error in state: 52.
##
## expr -> expr IMPLIES . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr IMPLIES 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LE VAL 
# 69
##
## Ends in an error in state: 50.
##
## expr -> expr LE . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LE VAR NEQ 
# 70
##
## Ends in an error in state: 51.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr LE expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LE expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LPAREN VAL 
# 71
##
## Ends in an error in state: 11.
##
## expr -> VAR LPAREN . expr_list RPAREN [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## VAR LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LPAREN VAR RSQUARE 
# 72
##
## Ends in an error in state: 90.
##
## expr -> VAR LPAREN expr_list . RPAREN [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## VAR LPAREN expr_list 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
## In state 84, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 80, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
## In state 81, spurious reduction of production expr_list -> loption(separated_nonempty_list(COMMA,expr)) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LSQUARE VAL 
# 73
##
## Ends in an error in state: 38.
##
## expr -> expr LSQUARE . expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr LSQUARE . expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LSQUARE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LSQUARE VAR DOTDOT VAR 
# 74
##
## Ends in an error in state: 65.
##
## expr -> expr LSQUARE expr DOTDOT . RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LSQUARE expr DOTDOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LSQUARE VAR VAL 
# 75
##
## Ends in an error in state: 39.
##
## expr -> expr . CONJ expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr LSQUARE expr . RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI RSQUARE NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ DOTDOT DIV DISJ CONJ ADD ]
## expr -> expr LSQUARE expr . DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LSQUARE expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LT VAL 
# 76
##
## Ends in an error in state: 48.
##
## expr -> expr LT . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR LT VAR NEQ 
# 77
##
## Ends in an error in state: 49.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr LT expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr LT expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR MUL TRUE VAR 
# 78
##
## Ends in an error in state: 37.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr MUL expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr MUL expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR MUL VAL 
# 79
##
## Ends in an error in state: 36.
##
## expr -> expr MUL . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr MUL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR NEQ VAL 
# 80
##
## Ends in an error in state: 42.
##
## expr -> expr NEQ . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR NEQ VAR NEQ 
# 81
##
## Ends in an error in state: 43.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr NEQ expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR SEMI VAL 
# 82
##
## Ends in an error in state: 40.
##
## expr -> expr SEMI . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr SEMI 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR SEMI VAR SEMI 
# 83
##
## Ends in an error in state: 41.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr SEMI expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr SEMI expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR SUB TRUE VAR 
# 84
##
## Ends in an error in state: 35.
##
## expr -> expr . CONJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DISJ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . IMPLIES expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . ADD expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SUB expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr SUB expr . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . MUL expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . DIV expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . EQEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . NEQ expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GT expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . GE expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . SEMI expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR SUB VAL 
# 85
##
## Ends in an error in state: 34.
##
## expr -> expr SUB . expr [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR VAL 
# 86
##
## Ends in an error in state: 110.
##
## expr -> expr . CONJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . DISJ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . IMPLIES expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . ADD expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . SUB expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . MUL expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . DIV expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . EQEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . NEQ expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . LT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . LE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . GT expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . GE expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . SEMI expr [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## expr -> expr . LSQUARE expr DOTDOT RSQUARE [ SUB SEMI NEQ MUL LT LSQUARE LE IMPLIES GT GE EQEQ EOF DIV DISJ CONJ ADD ]
## valbinding -> VAL VAR EQ expr . [ EOF ]
##
## The known suffix of the stack is as follows:
## VAL VAR EQ expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production simple_expr -> VAR 
## In state 32, spurious reduction of production expr -> simple_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR EQ VAR VAR 
# 87
##
## Ends in an error in state: 10.
##
## expr -> VAR . LPAREN expr_list RPAREN [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
## simple_expr -> VAR . [ VAL THEN SUB SEMI RSQUARE RPAREN PIPE NEQ MUL LT LSQUARE LE IN IMPLIES GT GE FUN EQEQ EQ EOF ENSURES ELSE DOTDOT DIV DISJ CONJ COMMA ADD ]
##
## The known suffix of the stack is as follows:
## VAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAL VAR VAR 
# 88
##
## Ends in an error in state: 108.
##
## valbinding -> VAL VAR . EQ expr [ EOF ]
##
## The known suffix of the stack is as follows:
## VAL VAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: VAR 
# 89
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
## 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

